<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://alshedivat.github.io/al-folio/feed.xml" rel="self" type="application/atom+xml"/><link href="https://alshedivat.github.io/al-folio/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-10-22T10:46:26+00:00</updated><id>https://alshedivat.github.io/al-folio/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">NeRF Neural Radiance Field in 3D Vision, Introduction and Review</title><link href="https://alshedivat.github.io/al-folio/blog/2024/Restabilizing-Diffusion-Models-with-Predictive-Noise-Fusion-Strategy-for-Image-Super-Resolution/" rel="alternate" type="text/html" title="NeRF Neural Radiance Field in 3D Vision, Introduction and Review"/><published>2024-10-22T00:17:43+00:00</published><updated>2024-10-22T00:17:43+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2024/Restabilizing%20Diffusion%20Models%20with%20Predictive%20Noise%20Fusion%20Strategy%20for%20Image%20Super-Resolution</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2024/Restabilizing-Diffusion-Models-with-Predictive-Noise-Fusion-Strategy-for-Image-Super-Resolution/"><![CDATA[<h2 id="abstract">Abstract</h2> <p>Neural Radiance Field (NeRF) has recently become a significant development in the field of Computer Vision, allowing for implicit, neural network-based scene representation and novel view synthesis.</p> <h2 id="theory">Theory</h2> <p>The radiance field describes color and volume density for every point and for every viewing direction in the scene. This is written as</p>]]></content><author><name></name></author><category term="Notes"/><category term="NeRF"/><summary type="html"><![CDATA[this is what included tabs in a post could look like]]></summary></entry><entry><title type="html">Anaconda常用命令</title><link href="https://alshedivat.github.io/al-folio/blog/2024/Anaconda-conda%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/" rel="alternate" type="text/html" title="Anaconda常用命令"/><published>2024-07-23T00:17:43+00:00</published><updated>2024-07-23T00:17:43+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2024/Anaconda%20conda%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2024/Anaconda-conda%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"><![CDATA[<h2 id="参考资料">参考资料</h2> <p><a href="https://blog.csdn.net/chenxy_bwave/article/details/119996001">【精选】Anaconda conda常用命令：从入门到精通_conda命令_笨牛慢耕的博客-CSDN博客</a></p> <h2 id="管理conda自身">管理conda自身</h2> <h3 id="查看conda版本">查看conda版本</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nt">--version</span>
</code></pre></div></div> <h3 id="查看conda的环境配置">查看conda的<a href="https://so.csdn.net/so/search?q=环境配置&amp;spm=1001.2101.3001.7020">环境配置</a></h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda config <span class="nt">--show</span>
</code></pre></div></div> <h3 id="设置镜像">设置镜像</h3> <p>conda有时候安装软件会非常慢。设置国内镜像的话可以使安装更快捷一些。设置方法如下所示：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#设置清华镜像</span>
conda config <span class="nt">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/
conda config <span class="nt">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/
conda config <span class="nt">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/
conda config <span class="nt">--add</span> channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/
<span class="c">#设置bioconda</span>
conda config <span class="nt">--add</span> channels bioconda
conda config <span class="nt">--add</span> channels conda-forge
<span class="c">#设置搜索时显示通道地址</span>
conda config <span class="nt">--set</span> show_channel_urls <span class="nb">yes</span>
</code></pre></div></div> <h4 id="临时使用">临时使用</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install</span> <span class="nt">-c</span> https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ example_package
</code></pre></div></div> <h3 id="更新conda">更新conda</h3> <p>推荐总是更新conda</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda update conda
</code></pre></div></div> <h3 id="更新anaconda整体">更新Anaconda整体</h3> <p>将整个Anaconda都更新到确保稳定性和兼容性的最新版本</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda update Anaconda
</code></pre></div></div> <h3 id="查询某个命令的帮助">查询某个命令的帮助</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create <span class="nt">--help</span>
</code></pre></div></div> <h2 id="管理环境">管理环境</h2> <p>conda允许你创建相互隔离的独立环境，这些环境被称之为虚拟环境（Virtual Environment），这些环境各自包含属于自己的文件、包以及他们的依存关系，并且不会相互干扰。</p> <p>Anaconda有一个缺省的名为base的环境。但是不建议把程序放在base环境中，应该创建不同的虚拟环境分别管理不同的开发项目。这个涉及到一个根本的问题：为什么我们需要虚拟环境呢？举一个简单的例子，想象一下你有多个项目要开发，每个项目中都有一些包要依赖于某个共同的包，但是各自的所需要的版本不一致，有一些需要低版本的，有些需要高版本的。然后你就陷入了众口难调的困境。为不同的项目创建虚拟环境就可以把不同项目隔离开来，各自使用自己所需要的软件环境。</p> <h3 id="创建虚拟环境">创建虚拟环境</h3> <p>使用conda创建虚拟环境的命令格式为:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create <span class="nt">-n</span> env_name <span class="nv">python</span><span class="o">=</span>3.8
</code></pre></div></div> <p>这表示创建python版本为3.8、名字为env_name的虚拟环境。</p> <p>创建后，env_name文件可以在Anaconda安装目录envs文件下找到。在不指定python版本时，自动创建基于最新python版本的虚拟环境.</p> <p>创建虚拟环境的同时安装必要的包(但是并不建议这样做，简化每一条命令的任务在绝大多数时候都是明智的，一个例外是需要反复执行的脚本)</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create <span class="nt">-n</span> env_name numpy matplotlib <span class="nv">python</span><span class="o">=</span>3.8
</code></pre></div></div> <h3 id="查看有哪些虚拟环境">查看有哪些虚拟环境</h3> <p>以下三条命令都可以。注意最后一个是”–”，而不是“-”.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">env </span>list
conda info <span class="nt">-e</span>
conda info <span class="nt">--envs</span>
</code></pre></div></div> <h3 id="激活虚拟环境">激活虚拟环境</h3> <p>使用如下命令即可激活创建的虚拟环境。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda activate env_name
</code></pre></div></div> <h3 id="退出虚拟环境">退出虚拟环境</h3> <p>使用如下命令即可退出当前工作的虚拟环境。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda activate
conda deactivate
</code></pre></div></div> <h3 id="删除虚拟环境">删除虚拟环境</h3> <p>执行以下命令可以将该指定虚拟环境及其中所安装的包都删除。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda remove <span class="nt">--name</span> env_name <span class="nt">--all</span>
</code></pre></div></div> <p>如果只删除虚拟环境中的某个或者某些包则是：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda remove <span class="nt">--name</span> env_name  package_name
</code></pre></div></div> <h3 id="克隆虚拟环境">克隆虚拟环境</h3> <p>根据已有环境名复制生成新的环境 假设已有环境名为A，需要生成的环境名为B：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create <span class="nt">-n</span> B <span class="nt">--clone</span> A
</code></pre></div></div> <p>根据已有环境路径复制生成新的环境 假设已有环境路径为D:\A，需要生成的新的环境名为B：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create <span class="nt">-n</span> B <span class="nt">--clone</span> D:<span class="se">\A</span>
</code></pre></div></div> <h3 id="导出环境">导出环境</h3> <p>很多的软件依赖特定的环境，我们可以导出环境，这样方便自己在需要时恢复环境，也可以提供给别人用于创建完全相同的环境。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#获得环境中的所有配置</span>
conda <span class="nb">env export</span> <span class="nt">--name</span> myenv <span class="o">&gt;</span> myenv.yml
<span class="c">#重新还原环境</span>
conda <span class="nb">env </span>create <span class="nt">-f</span>  myenv.yml
</code></pre></div></div> <h2 id="包package的管理">包(Package)的管理</h2> <h3 id="查询包的安装情况">查询包的安装情况</h3> <p>查询看当前环境中安装了哪些包</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda list
</code></pre></div></div> <p>查询当前Anaconda repository中是否有你想要安装的包</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda search package_name
</code></pre></div></div> <h2 id="查询是否有安装某个包">查询是否有安装某个包</h2> <p>用conda list后跟package名来查找某个指定的包是否已安装，而且支持*通配模糊查找。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda list pkgname        
conda list pkgname<span class="k">*</span>
</code></pre></div></div> <h3 id="包的安装和更新">包的安装和更新</h3> <p>在当前（虚拟）环境中安装一个包：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span>package_name
</code></pre></div></div> <p>也可以以以下命令安装某个特定版本的包(以下例为安装0.20.3版本的numpy)：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span><span class="nv">numpy</span><span class="o">=</span>0.20.3
</code></pre></div></div> <p>安装包的时候可以指定从哪个channel进行安装，比如说，以下命令表示不是从缺省通道，而是从conda_forge安装某个包。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span>pkg_name <span class="nt">-c</span> conda_forge
</code></pre></div></div> <h3 id="conda卸载包">conda卸载包</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda uninstall package_name
</code></pre></div></div> <p>这样会将依赖于这个包的所有其它包也同时卸载。</p> <p>如果不想删除依赖其当前要删除的包的其他包(不建议)：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda uninstall package_name <span class="nt">--force</span>
</code></pre></div></div> <h3 id="清理anaconda缓存">清理anaconda缓存</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda clean <span class="nt">-p</span>      <span class="c"># 删除没有用的包 --packages</span>
conda clean <span class="nt">-t</span>      <span class="c"># 删除tar打包 --tarballs</span>
conda clean <span class="nt">-y</span> <span class="nt">-all</span> <span class="c"># 删除所有的安装包及cache(索引缓存、锁定文件、未使用过的包和tar包)</span>
</code></pre></div></div> <p>关于清除命令的更详细的说明，可以执行以下命令进行查询：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda clean <span class="nt">-h</span>
</code></pre></div></div> <h2 id="python版本的管理">Python版本的管理</h2> <p>除了上面在创建虚环境时可以指定python版本外，Anaconda基环境的python版本也可以根据需要进行更改。</p> <h3 id="将版本变更到指定版本">将版本变更到指定版本</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda <span class="nb">install </span><span class="nv">python</span><span class="o">=</span>3.5
</code></pre></div></div> <p>更新完后可以用以下命令查看变更是否符合预期。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">--version</span>
</code></pre></div></div> <h3 id="将python版本更新到最新版本">将python版本更新到最新版本</h3> <p>如果你想将python版本更新到最新版本，可以使用以下命令：</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">conda</span> <span class="k">update</span> <span class="n">python</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Guides"/><category term="Conda"/><category term="Python"/><summary type="html"><![CDATA[参考资料 【精选】Anaconda conda常用命令：从入门到精通_conda命令_笨牛慢耕的博客-CSDN博客 管理conda自身 查看conda版本 conda --version 查看conda的环境配置 conda config --show 设置镜像 conda有时候安装软件会非常慢。设置国内镜像的话可以使安装更快捷一些。设置方法如下所示： #设置清华镜像 conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/bioconda/ #设置bioconda conda config --add channels bioconda conda config --add channels conda-forge #设置搜索时显示通道地址 conda config --set show_channel_urls yes 临时使用 conda install -c https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/ example_package 更新conda 推荐总是更新conda conda update conda 更新Anaconda整体 将整个Anaconda都更新到确保稳定性和兼容性的最新版本 conda update Anaconda 查询某个命令的帮助 conda create --help 管理环境 conda允许你创建相互隔离的独立环境，这些环境被称之为虚拟环境（Virtual Environment），这些环境各自包含属于自己的文件、包以及他们的依存关系，并且不会相互干扰。 Anaconda有一个缺省的名为base的环境。但是不建议把程序放在base环境中，应该创建不同的虚拟环境分别管理不同的开发项目。这个涉及到一个根本的问题：为什么我们需要虚拟环境呢？举一个简单的例子，想象一下你有多个项目要开发，每个项目中都有一些包要依赖于某个共同的包，但是各自的所需要的版本不一致，有一些需要低版本的，有些需要高版本的。然后你就陷入了众口难调的困境。为不同的项目创建虚拟环境就可以把不同项目隔离开来，各自使用自己所需要的软件环境。 创建虚拟环境 使用conda创建虚拟环境的命令格式为: conda create -n env_name python=3.8 这表示创建python版本为3.8、名字为env_name的虚拟环境。 创建后，env_name文件可以在Anaconda安装目录envs文件下找到。在不指定python版本时，自动创建基于最新python版本的虚拟环境. 创建虚拟环境的同时安装必要的包(但是并不建议这样做，简化每一条命令的任务在绝大多数时候都是明智的，一个例外是需要反复执行的脚本) conda create -n env_name numpy matplotlib python=3.8 查看有哪些虚拟环境 以下三条命令都可以。注意最后一个是”–”，而不是“-”. conda env list conda info -e conda info --envs 激活虚拟环境 使用如下命令即可激活创建的虚拟环境。 conda activate env_name 退出虚拟环境 使用如下命令即可退出当前工作的虚拟环境。 conda activate conda deactivate 删除虚拟环境 执行以下命令可以将该指定虚拟环境及其中所安装的包都删除。 conda remove --name env_name --all 如果只删除虚拟环境中的某个或者某些包则是： conda remove --name env_name package_name 克隆虚拟环境 根据已有环境名复制生成新的环境 假设已有环境名为A，需要生成的环境名为B： conda create -n B --clone A 根据已有环境路径复制生成新的环境 假设已有环境路径为D:\A，需要生成的新的环境名为B： conda create -n B --clone D:\A 导出环境 很多的软件依赖特定的环境，我们可以导出环境，这样方便自己在需要时恢复环境，也可以提供给别人用于创建完全相同的环境。 #获得环境中的所有配置 conda env export --name myenv &gt; myenv.yml #重新还原环境 conda env create -f myenv.yml 包(Package)的管理 查询包的安装情况 查询看当前环境中安装了哪些包 conda list 查询当前Anaconda repository中是否有你想要安装的包 conda search package_name 查询是否有安装某个包 用conda list后跟package名来查找某个指定的包是否已安装，而且支持*通配模糊查找。 conda list pkgname conda list pkgname* 包的安装和更新 在当前（虚拟）环境中安装一个包： conda install package_name 也可以以以下命令安装某个特定版本的包(以下例为安装0.20.3版本的numpy)： conda install numpy=0.20.3 安装包的时候可以指定从哪个channel进行安装，比如说，以下命令表示不是从缺省通道，而是从conda_forge安装某个包。 conda install pkg_name -c conda_forge conda卸载包 conda uninstall package_name 这样会将依赖于这个包的所有其它包也同时卸载。 如果不想删除依赖其当前要删除的包的其他包(不建议)： conda uninstall package_name --force 清理anaconda缓存 conda clean -p # 删除没有用的包 --packages conda clean -t # 删除tar打包 --tarballs conda clean -y -all # 删除所有的安装包及cache(索引缓存、锁定文件、未使用过的包和tar包) 关于清除命令的更详细的说明，可以执行以下命令进行查询： conda clean -h Python版本的管理 除了上面在创建虚环境时可以指定python版本外，Anaconda基环境的python版本也可以根据需要进行更改。 将版本变更到指定版本 conda install python=3.5 更新完后可以用以下命令查看变更是否符合预期。 python --version 将python版本更新到最新版本 如果你想将python版本更新到最新版本，可以使用以下命令： conda update python]]></summary></entry><entry><title type="html">Jupytor相关</title><link href="https://alshedivat.github.io/al-folio/blog/2024/Jupytor%E7%9B%B8%E5%85%B3/" rel="alternate" type="text/html" title="Jupytor相关"/><published>2024-07-23T00:17:43+00:00</published><updated>2024-07-23T00:17:43+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2024/Jupytor%E7%9B%B8%E5%85%B3</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2024/Jupytor%E7%9B%B8%E5%85%B3/"><![CDATA[<h2 id="一什么是jupyter">一、什么是jupyter</h2> <h3 id="1简介">1、简介：</h3> <p>jupyter notebook是一种 Web 应用，能让用户将说明文本、数学方程、代码和可视化内容全部组合到一个易于共享的文档中。它可以直接在代码旁写出叙述性文档，而不是另外编写单独的文档。也就是它可以能将代码、文档等这一切集中到一处，让用户一目了然。</p> <p>Jupyter这个名字是它要服务的三种语言的缩写：Julia，PYThon和R，这个名字与“木星（jupiter）”谐音。Jupyter Notebook 已迅速成为数据分析，机器学习的必备工具。因为它可以让数据分析师集中精力向用户解释整个分析过程。我们可以通过Jupyter notebook写出了我们的学习笔记。但是jupyter远远不止支持上面的三种语言，目前能够使用的语言他基本上都能支持，包括C、C++、C#，java、Go等等。</p> <p>jupyter notebook和我们前面所讲的两篇系列文章ipython其实都是来自同一个产品族，它的前身叫做ipython notebook，至于后面为什么更名这不得而知，这也就是为什么很多文章总是默认将ipython就说成是ipython notebook的原因了。但是既然已经更名了，我们还是区别对待ipython和jupyter notebook。</p> <h3 id="2安装与打开">2、安装与打开</h3> <p>在安装anaconda的时候会一起打包安装，也可通过pip或者是conda安装。</p> <p>直接在anaconda的菜单里面打开jupyter notebook，也可以通过命令行，输入jupyter notebook或者是jupyter-notebook。jupyter notebook会在浏览器中中打开，其为一种Web应用，在浏览器的地址栏会显示如下：http://localhost:8888/tree当一次打开多个jupyter notebook时，端口号会依次递增8889，8890依次递增。</p> <h3 id="3jupyter的作用">3、jupyter的作用</h3> <p>文学编程 ( Literate programming )，这是由 Donald Knuth 提出的编程方法。传统的结构化编程，人们需要按计算机的逻辑顺序来编写代码；与此相反，文学编程则可以让人们按照自己的思维逻辑来开发程序。</p> <p>简单来说，文学编程的读者不是机器，而是人。我们从写出让机器读懂的代码，过渡到向人们解说如何让机器实现我们的想法，其中除了代码，更多的是叙述性的文字、图表等内容。Jupyter Notebook 就是不可或缺的一款集编程和写作于一体的效率工具。</p> <p>Jupyter Notebook 的优点：</p> <ol> <li> <p>极其适合数据分析，想象一下如下混乱的场景：你在终端中运行程序，可视化结果却显示在另一个窗口中，包含函数和类的脚本存在其他文档中，更可恶的是你还需另外写一份说明文档来解释程序如何执行以及结果如何。此时 Jupyter Notebook 从天而降，将所有内容收归一处，你是不是顿觉灵台清明，思路更加清晰了呢？</p> </li> <li>支持多语言，也许你习惯使用 R 语言来做数据分析，或者是想用学术界常用的 MATLAB 和 Mathematica，这些都不成问题，只要安装相对应的核（kernel）即可。</li> <li>分享便捷，支持以网页的形式分享，GitHub 中天然支持 Notebook 展示，也可以通过 nbviewer 分享文档。也支持导出成 HTML、Markdown 、PDF 等多种格式的文档。</li> <li>远程运行，在任何地点都可以通过网络链接远程服务器来实现运算</li> <li>交互式展现，不仅可以输出图片、视频、数学公式，甚至可以呈现一些互动的可视化内容，比如可以缩放的地图或者是可以旋转的三维模型。这就需要交互式插件（Interactive widgets）来支持。</li> </ol> <p>常见的一些 jupyter 高级应用如：数学公式编辑、幻灯片制作、魔术关键字。</p> <h2 id="二jupyter-notebook简单使用">二、jupyter notebook简单使用</h2> <h3 id="1常用命令">1、常用命令</h3> <h4 id="1查找帮助">(1)查找帮助</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jupyter-notebook <span class="nt">--help</span>
jupyter-notebook <span class="nt">--help-all</span>	<span class="c">#会显示更详细的信息</span>
jupyter-notebook <span class="nt">-h</span>
</code></pre></div></div> <h4 id="2常用子命令">(2)常用子命令</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jupyter-notebook list	<span class="c">#列出当前打开的jupyter notebook</span>
jupyter-notebook stop 8888	<span class="c">#关闭指定端口号8888的jupyter</span>
jupyter-notebook password 123 <span class="c">#给某一个打开的jupyter notebook设置密码</span>
</code></pre></div></div> <h4 id="3常用选项">(3)常用选项</h4> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jupyter notebook <span class="nt">--help-all</span>
<span class="c">#查看jupyter命令的详细信息</span>

<span class="nt">--generate-config</span>
<span class="c">#产生默认的配置文件</span>

<span class="nt">--no-browser</span>
<span class="c">#启动jupyter notebook之后不打开浏览器</span>

<span class="nt">--pylab</span>
<span class="c">#在jupyter notebook里面集成，也可以在jupyter notebook里面使用,%pylab或者是%matplotlib魔术命令</span>

<span class="nt">--config</span><span class="o">=</span>&lt;Unicode&gt;
<span class="c">#制定一个完全路径的配置文件名称，关于配置文件后面会详解，默认是default，即系统指定的默认配置文件</span>

<span class="nt">--ip</span><span class="o">=</span>&lt;Unicode&gt;
<span class="c">#默认是: 'localhost'，从前面的现实中也可以看出来，表示的是notebook服务器会监听的IP地址，我们也可以手动指定</span>

<span class="nt">--port</span><span class="o">=</span>&lt;Int&gt;
<span class="c">#指定jupyter notebook打开浏览器的端口号，默认是: 8888，也可以手动输入</span>

<span class="nt">--notebook-dir</span><span class="o">=</span>&lt;Unicode&gt;
<span class="c">#默认使用默认的目录，表示的是notebook和kernels的目录</span>

<span class="nt">--browser</span><span class="o">=</span>&lt;Unicode&gt;
<span class="c">#还可以指定某一个特定的浏览器打开，默认使用系统默认的浏览器打开，是可以自己选定浏览器的</span>
</code></pre></div></div> <h3 id="2简单使用">2、简单使用</h3> <h4 id="1查看配置文件">(1)查看配置文件</h4> <p>使用以下命令</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jupyter-notebook <span class="nt">--generate-config</span>
</code></pre></div></div> <p>返回配置文件地址，根据配置文件地址打开配置文件</p> <p>可以修改默认目录，具体方法为搜索 ‘directory’ 将 c.NotebookApp.notebook_dir = ‘’ 后面的值修改为相应地址，应注意前面的#号需移除。</p> <h2 id="3运行环境配置">3、运行环境配置</h2> <h4 id="方法一">方法一</h4> <p>在每一个python的运行环境里面都使用conda install notebook 安装一个与之对应的notebook，然后我在做开发的时候，需要用什么环境，我就在每一个 Python 环境中的 script 文件夹下面打开对应的哪个 jupyter notebook 。这样没问题，但这样不是很高级，需要安装多次，且每次使用 jupyter notebook 的时都只能使用一个环境，局限性很大。</p> <h4 id="方法二">方法二</h4> <ol> <li> <p>方法1，首先在anaconda prompt里面激活我们需要的环境，然后执行下面一个命令：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>base<span class="o">)</span> C:<span class="se">\U</span>sers<span class="se">\l</span>enovo&gt;activate python27
   
<span class="o">(</span>python27<span class="o">)</span> C:<span class="se">\U</span>sers<span class="se">\l</span>enovo&gt;python <span class="nt">-m</span> ipykernel <span class="nb">install</span> <span class="nt">--name</span> python27
</code></pre></div> </div> </li> <li> <p>方法2，在我创建完我需要的运行环境之后，然后只需要在base运行环境中执行一个命令即可。</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span>base<span class="o">)</span> C:<span class="se">\U</span>sers<span class="se">\l</span>enovo&gt;conda <span class="nb">install </span>nb_conda
</code></pre></div> </div> </li> </ol>]]></content><author><name></name></author><category term="Guides"/><category term="Jupytor"/><category term="Python"/><summary type="html"><![CDATA[一些Jupytor入门]]></summary></entry><entry><title type="html">Linux常用命令</title><link href="https://alshedivat.github.io/al-folio/blog/2024/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/" rel="alternate" type="text/html" title="Linux常用命令"/><published>2024-07-23T00:17:43+00:00</published><updated>2024-07-23T00:17:43+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2024/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2024/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"><![CDATA[<h2 id="查询进程cpu使用情况">查询进程CPU使用情况:</h2> <p><code class="language-plaintext highlighter-rouge">top</code>：实时显示系统的CPU使用情况和进程信息。</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>启动 top:
    在终端中，只需键入 top 并按 Enter 键即可启动 top。
界面分区:
    top 界面分为多个部分，其中包括：
    顶部行：显示系统总体信息，如当前时间、系统运行时间、登录用户数、负载平均值和CPU、内存等的使用情况。
    进程列表：按 CPU 使用率降序排列的进程列表，显示了每个进程的 PID、用户、CPU使用率、内存使用率、进程状态等。
    底部命令行：用于在 top 中执行一些操作，如更改排序方式、筛选进程等。
控制和交互:
    使用键盘上的箭头键可以在进程列表中上下滚动。
    q 键用于退出 top。
    Space 键用于刷新 top 的显示。
    k 键用于终止选定的进程。
    f 键用于显示字段列表，允许您选择要显示的列。
    u 键用于筛选进程，可以输入用户名以查看特定用户的进程。
    1 键用于切换到全局 CPU 使用率视图，显示每个CPU核心的使用情况。
排序进程:
    P：按CPU使用率排序。
    M：按内存使用率排序。
    T：按运行时间排序。
    N：按PID排序。
显示字段:
    按 f 键后，您可以选择要在进程列表中显示的字段。这允许您自定义输出，以满足您的需求。
退出 top:
	按 q 键可退出 top。

</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PID：进程ID，每个正在运行的进程都有一个唯一的PID。
USER：启动进程的用户。
PR：进程的优先级。较小的值表示较高的优先级。
NI：进程的Nice值，表示进程的调度优先级。较高的值表示较低的优先级。
VIRT：虚拟内存使用量，表示进程使用的虚拟内存总量。
RES：常驻内存（Resident Set Size），表示进程当前在物理内存中使用的内存量。
SHR：共享内存，表示进程使用的可共享的内存量。
S：进程状态，可能的值包括：R（运行中）、S（睡眠中）、D（不可中断的休眠）、Z（僵死）、T（跟踪/停止）等。
%CPU：CPU 使用率，表示进程在最后一次采样时使用的CPU百分比。
%MEM：内存使用率，表示进程占用的物理内存百分比。
TIME+：进程已经运行的累计CPU时间。
COMMAND：进程的命令行。
</code></pre></div></div> <h2 id="查看gpu使用情况">查看GPU使用情况</h2> <p>nvidia-smi命令：nvidia-smi（NVIDIA System Management Interface）是一个用于管理NVIDIA GPU的命令行工具。</p> <p>可以使用<code class="language-plaintext highlighter-rouge">watch</code>命令，以每隔一段时间自动刷新显示：watch -n 1 nvidia-smi</p>]]></content><author><name></name></author><category term="Guides"/><category term="Linux"/><summary type="html"><![CDATA[查询进程CPU使用情况: top：实时显示系统的CPU使用情况和进程信息。 启动 top: 在终端中，只需键入 top 并按 Enter 键即可启动 top。 界面分区: top 界面分为多个部分，其中包括： 顶部行：显示系统总体信息，如当前时间、系统运行时间、登录用户数、负载平均值和CPU、内存等的使用情况。 进程列表：按 CPU 使用率降序排列的进程列表，显示了每个进程的 PID、用户、CPU使用率、内存使用率、进程状态等。 底部命令行：用于在 top 中执行一些操作，如更改排序方式、筛选进程等。 控制和交互: 使用键盘上的箭头键可以在进程列表中上下滚动。 q 键用于退出 top。 Space 键用于刷新 top 的显示。 k 键用于终止选定的进程。 f 键用于显示字段列表，允许您选择要显示的列。 u 键用于筛选进程，可以输入用户名以查看特定用户的进程。 1 键用于切换到全局 CPU 使用率视图，显示每个CPU核心的使用情况。 排序进程: P：按CPU使用率排序。 M：按内存使用率排序。 T：按运行时间排序。 N：按PID排序。 显示字段: 按 f 键后，您可以选择要在进程列表中显示的字段。这允许您自定义输出，以满足您的需求。 退出 top: 按 q 键可退出 top。 PID：进程ID，每个正在运行的进程都有一个唯一的PID。 USER：启动进程的用户。 PR：进程的优先级。较小的值表示较高的优先级。 NI：进程的Nice值，表示进程的调度优先级。较高的值表示较低的优先级。 VIRT：虚拟内存使用量，表示进程使用的虚拟内存总量。 RES：常驻内存（Resident Set Size），表示进程当前在物理内存中使用的内存量。 SHR：共享内存，表示进程使用的可共享的内存量。 S：进程状态，可能的值包括：R（运行中）、S（睡眠中）、D（不可中断的休眠）、Z（僵死）、T（跟踪/停止）等。 %CPU：CPU 使用率，表示进程在最后一次采样时使用的CPU百分比。 %MEM：内存使用率，表示进程占用的物理内存百分比。 TIME+：进程已经运行的累计CPU时间。 COMMAND：进程的命令行。 查看GPU使用情况 nvidia-smi命令：nvidia-smi（NVIDIA System Management Interface）是一个用于管理NVIDIA GPU的命令行工具。 可以使用watch命令，以每隔一段时间自动刷新显示：watch -n 1 nvidia-smi]]></summary></entry><entry><title type="html">Python相关</title><link href="https://alshedivat.github.io/al-folio/blog/2024/Python%E7%9B%B8%E5%85%B3/" rel="alternate" type="text/html" title="Python相关"/><published>2024-07-23T00:17:43+00:00</published><updated>2024-07-23T00:17:43+00:00</updated><id>https://alshedivat.github.io/al-folio/blog/2024/Python%E7%9B%B8%E5%85%B3</id><content type="html" xml:base="https://alshedivat.github.io/al-folio/blog/2024/Python%E7%9B%B8%E5%85%B3/"><![CDATA[<h2 id="setuppy">setup.py</h2> <h3 id="简述">简述</h3> <p>这是一个自定义包的安装接口，通过运行</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>py setup.py build
</code></pre></div></div> <p>进行构建；</p> <p>通过运行：</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>py setup.py <span class="nb">install</span>
</code></pre></div></div> <p>进行安装。</p> <h3 id="注意事项">注意事项</h3> <p>下面为一个setup.py文件示例</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">setuptools</span> <span class="kn">import</span> <span class="n">setup</span><span class="p">,</span> <span class="n">find_packages</span>

<span class="nf">setup</span><span class="p">(</span>
  <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">guided-diffusion</span><span class="sh">"</span><span class="p">,</span>
  <span class="n">py_modules</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">guided_diffusion</span><span class="sh">"</span><span class="p">],</span><span class="c1">#此行指定了模块名称
</span>  <span class="n">install_requires</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">blobfile&gt;=1.0.5</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">torch</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tqdm</span><span class="sh">"</span><span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div> <p>其中指定了模块名称为 “guided_diffusion” ，故在同级目录下要求一个 “guided_diffusion.py” 文件，若此文件没被提供也可以由 “guided_diffusion” 文件夹提供模块文件，通常这意味着 “guided_diffusion” 文件夹可能是一个包目录，而不是一个单一的模块文件。在这种情况下，需要将 <code class="language-plaintext highlighter-rouge">py_modules</code> 参数更改为指向包目录，而不是单个模块文件。</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">setuptools</span> <span class="kn">import</span> <span class="n">setup</span><span class="p">,</span> <span class="n">find_packages</span>

<span class="nf">setup</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">guided-diffusion</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">packages</span><span class="o">=</span><span class="nf">find_packages</span><span class="p">(),</span>
    <span class="n">install_requires</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">blobfile&gt;=1.0.5</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">torch</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">tqdm</span><span class="sh">"</span><span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div>]]></content><author><name></name></author><category term="Guides"/><category term="Python"/><summary type="html"><![CDATA[setup.py 简述 这是一个自定义包的安装接口，通过运行 py setup.py build 进行构建； 通过运行： py setup.py install 进行安装。 注意事项 下面为一个setup.py文件示例 from setuptools import setup, find_packages setup( name="guided-diffusion", py_modules=["guided_diffusion"],#此行指定了模块名称 install_requires=["blobfile&gt;=1.0.5", "torch", "tqdm"], ) 其中指定了模块名称为 “guided_diffusion” ，故在同级目录下要求一个 “guided_diffusion.py” 文件，若此文件没被提供也可以由 “guided_diffusion” 文件夹提供模块文件，通常这意味着 “guided_diffusion” 文件夹可能是一个包目录，而不是一个单一的模块文件。在这种情况下，需要将 py_modules 参数更改为指向包目录，而不是单个模块文件。 from setuptools import setup, find_packages setup( name="guided-diffusion", packages=find_packages(), install_requires=["blobfile&gt;=1.0.5", "torch", "tqdm"], )]]></summary></entry></feed>